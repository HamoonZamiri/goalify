// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChestStatus string

const (
	ChestStatusOpened    ChestStatus = "opened"
	ChestStatusNotOpened ChestStatus = "not_opened"
)

func (e *ChestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChestStatus(s)
	case string:
		*e = ChestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ChestStatus: %T", src)
	}
	return nil
}

type NullChestStatus struct {
	ChestStatus ChestStatus
	Valid       bool // Valid is true if ChestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ChestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChestStatus), nil
}

type ChestType string

const (
	ChestTypeBronze ChestType = "bronze"
	ChestTypeSilver ChestType = "silver"
	ChestTypeGold   ChestType = "gold"
)

func (e *ChestType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChestType(s)
	case string:
		*e = ChestType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChestType: %T", src)
	}
	return nil
}

type NullChestType struct {
	ChestType ChestType
	Valid     bool // Valid is true if ChestType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChestType) Scan(value interface{}) error {
	if value == nil {
		ns.ChestType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChestType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChestType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChestType), nil
}

type GoalStatus string

const (
	GoalStatusComplete    GoalStatus = "complete"
	GoalStatusNotComplete GoalStatus = "not_complete"
)

func (e *GoalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GoalStatus(s)
	case string:
		*e = GoalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GoalStatus: %T", src)
	}
	return nil
}

type NullGoalStatus struct {
	GoalStatus GoalStatus
	Valid      bool // Valid is true if GoalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGoalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GoalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GoalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGoalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GoalStatus), nil
}

type ItemStatus string

const (
	ItemStatusEquipped    ItemStatus = "equipped"
	ItemStatusNotEquipped ItemStatus = "not_equipped"
)

func (e *ItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemStatus(s)
	case string:
		*e = ItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemStatus: %T", src)
	}
	return nil
}

type NullItemStatus struct {
	ItemStatus ItemStatus
	Valid      bool // Valid is true if ItemStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemStatus), nil
}

type ItemType string

const (
	ItemTypeCommon    ItemType = "common"
	ItemTypeRare      ItemType = "rare"
	ItemTypeEpic      ItemType = "epic"
	ItemTypeLegendary ItemType = "legendary"
)

func (e *ItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemType(s)
	case string:
		*e = ItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemType: %T", src)
	}
	return nil
}

type NullItemType struct {
	ItemType ItemType
	Valid    bool // Valid is true if ItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemType) Scan(value interface{}) error {
	if value == nil {
		ns.ItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemType), nil
}

type Chest struct {
	ID          pgtype.UUID
	Type        ChestType
	Description string
	Price       int32
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type ChestItem struct {
	ID        pgtype.UUID
	ImageUrl  pgtype.Text
	Title     string
	Rarity    ItemType
	Price     pgtype.Int4
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type ChestItemDropRate struct {
	ID        pgtype.UUID
	ItemID    pgtype.UUID
	ChestID   pgtype.UUID
	DropRate  float64
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type Goal struct {
	ID          pgtype.UUID
	Title       string
	Description pgtype.Text
	UserID      pgtype.UUID
	CategoryID  pgtype.UUID
	Status      NullGoalStatus
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type GoalCategory struct {
	ID        pgtype.UUID
	Title     string
	XpPerGoal int32
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type Level struct {
	ID         int32
	LevelUpXp  int32
	CashReward int32
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type User struct {
	ID                 pgtype.UUID
	Email              string
	Password           string
	Xp                 pgtype.Int4
	LevelID            pgtype.Int4
	CashAvailable      pgtype.Int4
	RefreshToken       pgtype.UUID
	RefreshTokenExpiry pgtype.Timestamp
	CreatedAt          pgtype.Timestamp
	UpdatedAt          pgtype.Timestamp
}

type UserChest struct {
	ID            pgtype.UUID
	UserID        pgtype.UUID
	ChestID       pgtype.UUID
	QuantityOwned pgtype.Int4
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type UserItem struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	ItemID    pgtype.UUID
	Status    NullItemStatus
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}
