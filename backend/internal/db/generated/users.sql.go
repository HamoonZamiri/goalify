// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, refresh_token_expiry, level_id) VALUES ($1, $2, $3, $4) RETURNING id, email, password, xp, level_id, cash_available, refresh_token, refresh_token_expiry, created_at, updated_at
`

type CreateUserParams struct {
	Email              string
	Password           string
	RefreshTokenExpiry pgtype.Timestamp
	LevelID            pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.RefreshTokenExpiry,
		arg.LevelID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Xp,
		&i.LevelID,
		&i.CashAvailable,
		&i.RefreshToken,
		&i.RefreshTokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getLevelById = `-- name: GetLevelById :one
SELECT id, level_up_xp, cash_reward, created_at, updated_at FROM levels WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLevelById(ctx context.Context, id int32) (Level, error) {
	row := q.db.QueryRow(ctx, getLevelById, id)
	var i Level
	err := row.Scan(
		&i.ID,
		&i.LevelUpXp,
		&i.CashReward,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, xp, level_id, cash_available, refresh_token, refresh_token_expiry, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Xp,
		&i.LevelID,
		&i.CashAvailable,
		&i.RefreshToken,
		&i.RefreshTokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, xp, level_id, cash_available, refresh_token, refresh_token_expiry, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Xp,
		&i.LevelID,
		&i.CashAvailable,
		&i.RefreshToken,
		&i.RefreshTokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
UPDATE users
    SET refresh_token = $1,
    refresh_token_expiry = $2
    WHERE id = $3 
    RETURNING id, email, password, xp, level_id, cash_available, refresh_token, refresh_token_expiry, created_at, updated_at
`

type UpdateRefreshTokenParams struct {
	RefreshToken       pgtype.UUID
	RefreshTokenExpiry pgtype.Timestamp
	ID                 pgtype.UUID
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, updateRefreshToken, arg.RefreshToken, arg.RefreshTokenExpiry, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Xp,
		&i.LevelID,
		&i.CashAvailable,
		&i.RefreshToken,
		&i.RefreshTokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users
    SET email = coalesce($1, email),
    password = coalesce($2, password),
    refresh_token = coalesce($3, refresh_token),
    refresh_token_expiry = coalesce($4, refresh_token_expiry),
    level_id = coalesce($5, level_id),
    xp = coalesce($6, xp),
    cash_available = coalesce($7, cash_available)
    WHERE id = $8
    RETURNING id, email, password, xp, level_id, cash_available, refresh_token, refresh_token_expiry, created_at, updated_at
`

type UpdateUserByIdParams struct {
	Email              pgtype.Text
	Password           pgtype.Text
	RefreshToken       pgtype.UUID
	RefreshTokenExpiry pgtype.Timestamp
	LevelID            pgtype.Int4
	Xp                 pgtype.Int4
	CashAvailable      pgtype.Int4
	ID                 pgtype.UUID
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserById,
		arg.Email,
		arg.Password,
		arg.RefreshToken,
		arg.RefreshTokenExpiry,
		arg.LevelID,
		arg.Xp,
		arg.CashAvailable,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Xp,
		&i.LevelID,
		&i.CashAvailable,
		&i.RefreshToken,
		&i.RefreshTokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
