// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: goals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO goals (title, description, user_id, category_id)
VALUES ($1, $2, $3, $4)
RETURNING id, title, description, user_id, category_id, status, created_at, updated_at
`

type CreateGoalParams struct {
	Title       string
	Description pgtype.Text
	UserID      pgtype.UUID
	CategoryID  pgtype.UUID
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goal, error) {
	row := q.db.QueryRow(ctx, createGoal,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.CategoryID,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGoalById = `-- name: DeleteGoalById :exec
DELETE FROM goals WHERE id = $1
`

func (q *Queries) DeleteGoalById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteGoalById, id)
	return err
}

const getGoalById = `-- name: GetGoalById :one
SELECT id, title, description, user_id, category_id, status, created_at, updated_at FROM goals WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGoalById(ctx context.Context, id pgtype.UUID) (Goal, error) {
	row := q.db.QueryRow(ctx, getGoalById, id)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGoalsByUserId = `-- name: GetGoalsByUserId :many
SELECT id, title, description, user_id, category_id, status, created_at, updated_at FROM goals WHERE user_id = $1
`

func (q *Queries) GetGoalsByUserId(ctx context.Context, userID pgtype.UUID) ([]Goal, error) {
	rows, err := q.db.Query(ctx, getGoalsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goal
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoalById = `-- name: UpdateGoalById :one
UPDATE goals
SET title = coalesce($1, title),
    description = coalesce($2, description),
    status = coalesce($3, status),
    category_id = coalesce($4, category_id)
WHERE id = $5
RETURNING id, title, description, user_id, category_id, status, created_at, updated_at
`

type UpdateGoalByIdParams struct {
	Title       pgtype.Text
	Description pgtype.Text
	Status      NullGoalStatus
	CategoryID  pgtype.UUID
	ID          pgtype.UUID
}

func (q *Queries) UpdateGoalById(ctx context.Context, arg UpdateGoalByIdParams) (Goal, error) {
	row := q.db.QueryRow(ctx, updateGoalById,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CategoryID,
		arg.ID,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGoalStatus = `-- name: UpdateGoalStatus :one
UPDATE goals
SET status = $1
WHERE id = $2
RETURNING id, title, description, user_id, category_id, status, created_at, updated_at
`

type UpdateGoalStatusParams struct {
	Status NullGoalStatus
	ID     pgtype.UUID
}

func (q *Queries) UpdateGoalStatus(ctx context.Context, arg UpdateGoalStatusParams) (Goal, error) {
	row := q.db.QueryRow(ctx, updateGoalStatus, arg.Status, arg.ID)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
